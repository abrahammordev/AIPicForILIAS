<?php
declare(strict_types=1);
/**
 *  This file is part of the AI Pic Repository Page Component plugin for ILIAS, which allows
 *  users of your platform to add an image component to their pages, generated by an external AI model.
 *  This plugin is created and maintained by SURLABS.
 *
 *  The AI Pic Repository Page Component plugin for ILIAS is open-source and licensed under GPL-3.0.
 *  For license details, visit https://www.gnu.org/licenses/gpl-3.0.en.html.
 *
 *  To report bugs or participate in discussions, visit the Mantis system and filter by
 *  the category "AI Pic" at https://mantis.ilias.de.
 *
 *  More information and source code are available at:
 *  https://github.com/surlabs/AIPicForILIAS
 *
 *  If you need support, please contact the maintainer of this software at:
 *  info@surlabs.com
 *
 */

use ILIAS\UI\Component\Input\Container\Form\Standard;
use ILIAS\UI\Factory;
use ILIAS\UI\Renderer;
use platform\AIPicConfig;

/**
 * Class ilAIPicConfigGUI
 * @authors Sergio Santiago, Abraham Morales <info@surlabs.com>
 * @ilCtrl_IsCalledBy  ilAIPicConfigGUI: ilObjComponentSettingsGUI
 */

class ilAIPicConfigGUI extends ilPluginConfigGUI
{
    private Factory $ui;
    private Renderer $renderer;
    private \ILIAS\Refinery\Factory $refinery;
    private ilGlobalTemplateInterface|ilGlobalTemplate $tpl;

    public function __construct()
    {
        global $DIC, $tpl;

        $this->ui = $DIC->ui()->factory();
        $this->renderer = $DIC->ui()->renderer();
        $this->refinery = $DIC->refinery();
        $this->tpl = $tpl;
    }

    function isValidUrl($url): bool
    {
        return preg_match('/\b((https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/i', $url) == 1;
    }

    public function generateConfigForm(AIPicConfig $currentConfig): Standard
    {
        global $DIC;

        $fieldsHeader = [];
        $fieldRequestsBody = [];
        $fieldResponseBody = [];

        $urlChecker = $this->refinery->custom()->constraint(function ($val) {
            return $this->isValidUrl($val);
        }, $this->plugin_object->txt("url_restriction"));

        $urlInput = $this->ui->input()->field()->text($this->plugin_object->txt("api_url"), $this->plugin_object->txt("api_url_description"))->withAdditionalTransformation($urlChecker)->withValue($currentConfig->getApiUrl() ?? "")->withRequired(true);
        $autenticationKey = $this->ui->input()->field()->text($this->plugin_object->txt("authentication_key"), $this->plugin_object->txt("authentication_key_description"))->withValue($currentConfig->getAutheticationKeyLabel() ?? "");
        $autenticationValue = $this->ui->input()->field()->text($this->plugin_object->txt("authentication_value"), $this->plugin_object->txt("authentication_value_description"))->withValue($currentConfig->getAutheticationValue() ?? "");

        $headerOptions = $this->ui->input()->field()->text($this->plugin_object->txt("header_options"), $this->plugin_object->txt("header_options_description"))->withValue($currentConfig->getAdditionalHeaderOptions() ?? "");

        $fieldsHeader["urlInput"] = $urlInput;
        $fieldsHeader["autenticationKey"] = $autenticationKey;
        $fieldsHeader["autenticationValue"] = $autenticationValue;
        $fieldsHeader["headerOptions"] = $headerOptions;

        $sectionHeader = $this->ui->input()->field()->section($fieldsHeader, $this->plugin_object->txt("header_request"));

        $requestBody = $this->ui->input()->field()->text($this->plugin_object->txt("request_body_prompt"), $this->plugin_object->txt("request_body_prompt_description"))->withValue($currentConfig->getRequestBodyPromptKey() ?? "")->withRequired(true);

        $requestBodyModel = $this->ui->input()->field()->text($this->plugin_object->txt("request_model"),$this->plugin_object->txt("request_model_description"))->withValue($currentConfig->getModel() ?? "")->withRequired(false);
        $requestBodyContext = $this->ui->input()->field()->textarea($this->plugin_object->txt("request_body_prompt_context"), $this->plugin_object->txt("request_body_prompt_context_description"))->withValue($currentConfig->getPromptContext() ?? "");
        $requestBodyOptions = $this->ui->input()->field()->text($this->plugin_object->txt("request_body_options"), $this->plugin_object->txt("request_body_options_description"))->withValue($currentConfig->getAdditionalRequestBodyOptions() ?? "");

        $fieldRequestsBody["requestBody"] = $requestBody;
        $fieldRequestsBody["requestModel"] = $requestBodyModel;
        $fieldRequestsBody["requestBodyContext"] = $requestBodyContext;
        $fieldRequestsBody["requestBodyOptions"] = $requestBodyOptions;

        $sectionRequestBody = $this->ui->input()->field()->section($fieldRequestsBody, $this->plugin_object->txt("body_request"));

        $responseLabel = $this->ui->input()->field()->text($this->plugin_object->txt("response_body_key"), $this->plugin_object->txt("response_body_key_description"))->withValue($currentConfig->getResponseKey() ?? "")->withRequired(true);
        $responseSubLabel = $this->ui->input()->field()->text($this->plugin_object->txt("response_body_subkey"), $this->plugin_object->txt("response_body_subkey_description"))->withValue($currentConfig->getResponseSubkey() ?? "");

        $fieldResponseBody["responseLabel"] = $responseLabel;
        $fieldResponseBody["responseSubLabel"] = $responseSubLabel;

        $sectionResponseBody = $this->ui->input()->field()->section($fieldResponseBody, $this->plugin_object->txt("response"));

        $DIC->ctrl()->setParameterByClass(
            'ilAIPicConfigGUI',
            'saveConfig',
            'config'
        );

        $form_action = $DIC->ctrl()->getLinkTargetByClass('ilAIPicConfigGUI', "saveConfig");
        $form = $this->ui->input()->container()->form()->standard($form_action, [$sectionHeader, $sectionRequestBody, $sectionResponseBody]);

        return $form;
    }

    public function performCommand(string $cmd): void
    {
        $this->{$cmd}();
    }

    /**
     * @throws Exception
     */
    public function configure(): void
    {
        global $DIC;

        $currentConfig = new AIPicConfig();
        $currentConfig->loadFromDB();
        $form = $this->generateConfigForm($currentConfig);
        $this->tpl->setContent($this->renderer->render($form));

    }

    /**
     * @throws Exception
     */
    public function saveConfig(): void
    {
        global $DIC;

        $currentConfig = new AIPicConfig();
        $currentConfig->loadFromDB();
        $form = $this->generateConfigForm($currentConfig);
        $request = $DIC->http()->request();
        $message = "";

        if ($_SERVER['REQUEST_METHOD'] == "POST") {
            $form = $form->withRequest($request);
            $currentConfig = $this->createConfigFromForm($form, $currentConfig);
            $currentConfig->save();
            $message = $this->renderer->render($this->ui->messageBox()->success($this->plugin_object->txt("config_saved")));
        }
        $this->tpl->setContent($message . $this->renderer->render($form));
    }

    private function createConfigFromForm(Standard $form, AIPicConfig $config): AIPicConfig
    {
        $data = $form->getData();

        if (isset($data)) {
            $config->setApiUrl(trim($data[0]['urlInput']));
            $config->setAutheticationKeyLabel(trim($data[0]['autenticationKey']));
            $config->setAutheticationValue(trim($data[0]['autenticationValue']));
            $config->setAdditionalHeaderOptions(str_replace(" ", "", $data[0]['headerOptions']));
            $config->setRequestBodyPromptKey(trim($data[1]['requestBody']));
            $config->setModel(trim($data[1]['requestModel']));
            $config->setPromptContext($data[1]['requestBodyContext']);
            $config->setAdditionalRequestBodyOptions(str_replace(" ", "", $data[1]['requestBodyOptions']));
            $config->setResponseKey(trim($data[2]['responseLabel']));
            $config->setResponseSubkey(trim($data[2]['responseSubLabel']));
        }

        return $config;
    }
}